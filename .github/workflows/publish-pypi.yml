name: Publish to PyPi

# RELEASE PROCESS
#
# === Manual activities ===
#
# 1. Document human readable changes in CHANGELOG
# 2. Bump package version using poetry version <major|minor|patch|specific version>
# 3. Create a PR to develop branch, and merge if all tests pass
# 4. Edit the current draft release notes
# 5. If not already set, use `v<new version>` as a tag, and select develop as target branch
#
# === Automated activities ===
#
# 1. Extract release notes tag that was published
# 2. Ensure release notes tag match what's in CHANGELOG and pyproject
# 3. Run tests, linting, security and complexity base line
# 4. Publish package to PyPi test repository
# 5. Publish package to PyPi prod repository
# 6. Push latest release source code to master using release title as the commit message

on:
  release:
    types: [ published ]

jobs:
  upload:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: "3.8"
      - name: Set release notes tag
        run: |
          export RELEASE_TAG_VERSION=${{ github.event.release.tag_name }}
          echo "RELEASE_TAG_VERSION=${RELEASE_TAG_VERSION:1}" >> $GITHUB_ENV
      - name: Ensure new version is also set in pyproject and CHANGELOG
        run: |
          grep --regexp "\[${RELEASE_TAG_VERSION}\]" CHANGELOG.md
          grep --regexp "version \= \"${RELEASE_TAG_VERSION}\"" pyproject.toml
      - name: Install dependencies
        run: make dev
      - name: Install pypa/build
        run: >-
          python -m
          pip install
          build
          --user
      - name: Build a binary wheel and a source tarball
        run: >-
          python -m
          build
          --sdist
          --wheel
          --outdir dist/
#      - name: Run all tests, linting and baselines
#        run: make pr
      - name: Build python package and wheel
        run: poetry build
      - name: Upload to PyPi test
        run: make release-test
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_TEST_PASSWORD }}
      - name: Upload to PyPi prod
        run: make release-prod
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
  #    - name: publish lambda layer in SAR by triggering the internal codepipeline
  #      run: |
  #        aws ssm put-parameter --name "powertools-python-release-version" --value $RELEASE_TAG_VERSION --overwrite
  #        aws codepipeline start-pipeline-execution --name ${{ secrets.CODEPIPELINE_NAME }}
  #      env:
  #        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #        AWS_DEFAULT_REGION: eu-west-1
  #        AWS_DEFAULT_OUTPUT: json



  sync_master:
    needs: upload
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Sync master from detached head
        # If version matches CHANGELOG and pyproject.toml
        # If it passes all checks, successfully releases to test and prod
        # Then sync up master with latest source code release
        # where commit message will be Release notes title
        run: git push origin HEAD:refs/heads/master --force
